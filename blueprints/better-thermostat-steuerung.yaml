blueprint:
  name: Better Thermostat Steuerung
  author: d187
  homeassistant:
    min_version: "2024.10.0"
  description: >
    Dieses Modul dient als übergeordnete Logik-Ebene, die die **Ziel-Temperatur**
    und den **HVAC-Modus** (heat/cool/auto oder off) basierend auf Anwesenheit und Zeitplänen
    an die Better Thermostat (BT) Entität(en) übergibt.
    
    Alle weiteren Steuerungs- und Optimierungsfunktionen werden von Better Thermostat übernommen.


    > Kernfunktionen:

    Anwesenheit von Personen

    Zeitpläne (Scheduler)

    Frostschutz

    Aktivierung basierend auf Wetter/Temperatur


    **Ziel-Entität**: **Ihre Better Thermostat (BT) Klima-Entität.**
  source_url: https://github.com/seebaer1976/home-assistant/blob/main/blueprints/trhs-steuerung.yaml
  domain: automation
  
  # NEUE STRUKTUR
  input:
    thermostat_section:
      name: 🔥 Thermostat & HVAC-Modus
      icon: mdi:thermostat-box
      input:
        input_trvs:
          name: Better Thermostat (BT) Entität
          description: >
            Wählen Sie die **virtuelle Better Thermostat (BT)** Klima-Entität(en) (z.B. `climate.better_thermostat_wohnzimmer`), die Sie steuern möchten.
          selector:
            entity:
              filter:
                - domain:
                    - climate
              multiple: true

        input_hvac_mode:
          name: Betrieb / HVAC-Modus
          description: >
            Wählen Sie den HVAC-Modus für Ihre BT-Entität.
          default: "heat"
          selector:
            select:
              options:
                - heat
                - cool
                - auto
                - heat_cool

    temperature_section:
      name: 🌡️ Ziel-Temperaturen & Frostschutz
      icon: mdi:thermometer-high
      collapsed: false
      input:
        input_temperature_comfort_static:
          name: ☀️ Ziel-Temperatur (Statisch)
          description: >
            Die Ziel-Temperatur für den Komfort-Modus (Heizplan aktiv / Zuhause).
          default: 22
          selector:
            number:
              min: 12.0
              max: 86.0
              step: 0.5
              mode: box
              unit_of_measurement: °C / °F

        input_temperature_eco_static:
          name: 🌙 Eco-Temperatur (Statisch)
          description: >
            Die Temperatur, die eingestellt wird, wenn der Komfort-Modus nicht aktiv ist (z.B. nachts oder bei Abwesenheit).
          default: 19
          selector:
            number:
              min: 4.0
              max: 75.0
              step: 0.5
              mode: box
              unit_of_measurement: °C / °F
              
        input_frost_protection_temp:
          name: ❄️ Frostschutz-Temperatur
          description: >
            Temperatur, die eingestellt wird, wenn die Ziel-Temperatur niedriger als dieser Wert ist.
          default: 5
          selector:
            number:
              min: 5.0
              max: 62.0
              step: 0.5
              mode: box
              unit_of_measurement: °C / °F

        # Optionale Entitäten für dynamische Temperaturen
        input_temperature_comfort:
          name: Ziel-Temperatur (Entität)
          description: >
            (Optional) Entität (z.B. `input_number`) zur dynamischen Steuerung der Ziel-Temperatur.
          default: []
          selector:
            entity:
              filter:
                - domain:
                    - input_number
              multiple: false

        input_temperature_eco:
          name: Eco-Temperatur (Entität)
          description: >
            (Optional) Entität (z.B. `input_number`) zur dynamischen Steuerung der Eco-Temperatur.
          default: []
          selector:
            entity:
              filter:
                - domain:
                    - input_number
              multiple: false

    logic_section:
      name: 👤 Zeit- & Anwesenheitslogik
      icon: mdi:account-clock
      collapsed: true
      input:
        # Zeitplanung
        input_schedulers:
          name: 🗓️ Zeitpläne (Schedule Entitäten)
          description: >
            Ein [Zeitplan](https://www.home-assistant.io/integrations/schedule/) legt fest, wann auf Ziel-Temperatur geheizt werden soll.
          default: []
          selector:
            entity:
              filter:
                - domain:
                    - schedule
              multiple: true
              
        # Personen
        input_persons:
          name: 👥 Abwesenheit-Personen
          description: >
            [Personen](https://www.home-assistant.io/integrations/person/) angeben. Wenn alle Personen **abwesend** sind, wird auf Eco-Temperatur umgeschaltet.
          default: []
          selector:
            entity:
              filter:
                - domain:
                    - person
              multiple: true

        input_people_entering_home_duration:
          name: Ankunfts-Verzögerung
          description: >
            Dauer, die jemand zuhause sein muss, bevor der Komfort-Modus aktiv wird.
          default:
            hours: 0
            minutes: 0
            seconds: 2
          selector:
            duration:

        input_people_leaving_home_duration:
          name: Abwesenheits-Verzögerung
          description: >
            Dauer, die jemand abwesend sein muss, bevor auf Eco-Temperatur umgeschaltet wird.
          default:
            hours: 0
            minutes: 0
            seconds: 2
          selector:
            duration:

    toggle_section:
      name: ⚙️ Globale Ein-/Ausschalt-Optionen
      icon: mdi:light-switch
      collapsed: true
      input:
        input_mode_winter:
          name: Wintermodus / Master-Umschalter
          description: >
            (Optional) Wenn *aus*, wird die gesamte Automation deaktiviert und alle BT-Entitäten auf *off* gesetzt.
          default:
          selector:
            entity:
              filter:
                - domain:
                    - input_boolean
                    - binary_sensor
              multiple: false

        # Außentemperatur-Logik
        input_mode_outside_temperature:
          name: Außentemperatur-Sensor
          description: >
            (Optional) Steuert die Heizung nur, wenn die Außentemperatur unter dem Schwellenwert liegt.
          default:
          selector:
            entity:
              filter:
                - domain:
                    - weather
                - domain:
                    - sensor
                  device_class: temperature
              multiple: false

        input_mode_outside_temperature_threshold:
          name: Außentemperatur-Schwellenwert
          description: >
            Fällt die Außentemperatur unter diesen Schwellenwert, wird die Heizung aktiviert.
          default: 15
          selector:
            number:
              min: 5
              max: 68
              step: 0.5
              mode: box
              unit_of_measurement: °C / °F

        # Raumtemperatur-Logik
        input_temperature_sensor:
          name: Raumtemperatursensor (Für globale Aktivierung)
          description: >
            (Optional) Ein Raumtemperatursensor, der für die globale Aktivierungslogik verwendet wird.
          default: []
          selector:
            entity:
              filter:
                - domain:
                    - sensor
                  device_class:
                    - temperature
              multiple: false

        input_mode_room_temperature:
          name: Raumtemperatur-Schwellenwert aktivieren
          description: >
            Aktiviert die Prüfung, ob auch die Raumtemperatur unter/über ihrem Schwellenwert liegt (Benötigt `Raumtemperatursensor`).
          default: false
          selector:
            boolean:

        input_mode_room_temperature_threshold:
          name: Raumtemperatur-Schwellenwert
          description: >
            Schwellenwert für Ihren Raumtemperatursensor.
          default: 18
          selector:
            number:
              min: 5
              max: 68
              step: 0.5
              mode: box
              unit_of_measurement: °C / °F

variables:
  # Thermostate / Sensoren
  input_trvs: !input input_trvs
  input_temperature_sensor: !input input_temperature_sensor
  is_temperature_sensor_defined: "{{ input_temperature_sensor != [] }}"

  # Personen
  input_persons: !input input_persons
  input_people_entering_home_duration: !input input_people_entering_home_duration
  input_people_leaving_home_duration: !input input_people_leaving_home_duration

  input_person_count: "{{ input_persons | count }}"
  is_person_defined: "{{ input_person_count > 0 }}"

  # Zeitplaner
  input_schedulers: !input input_schedulers
  # input_scheduler_selector entfernt

  # Temperaturen
  input_temperature_comfort: !input input_temperature_comfort
  input_temperature_eco: !input input_temperature_eco
  input_hvac_mode: !input input_hvac_mode
  factor: "{{ iif(input_hvac_mode == 'cool', -1, 1) | int }}"

  # Ein/Aus
  input_mode_winter: !input input_mode_winter
  # input_invert_winter_mode_value entfernt
  input_mode_outside_temperature: !input input_mode_outside_temperature
  input_mode_outside_temperature_threshold: !input input_mode_outside_temperature_threshold
  input_mode_room_temperature: !input input_mode_room_temperature
  input_mode_room_temperature_threshold: !input input_mode_room_temperature_threshold

  # Frostschutz
  input_frost_protection_temp: !input input_frost_protection_temp
  # input_frost_protection_duration entfernt

  # Zustand des Master-Schalters
  is_master_switch_active: >
    {% if input_mode_winter == none %}
      {% set result = true %}
    {% else %}
      {% set result = states(input_mode_winter) | lower in ['on', 'true', '1'] %}
    {% endif %}
    {{ result }}

  # Personenzustand
  person_states: >
    {% set p_states = namespace(persons = []) %}
    {% for person in input_persons %}
      {% if states(person) == 'home' %}
        {% set p_states.persons = p_states.persons + ['home'] %}
      {% else %}
        {% set p_states.persons = p_states.persons + ['not_home'] %}
      {% endif %}
      {% if now() - as_datetime(states[person].last_changed) < input_people_entering_home_duration and states(person) == 'home' %}
        {% set p_states.persons = p_states.persons + ['just_arrived'] %}
      {% endif %}
    {% endfor %}
    {{ p_states.persons }}

  # Anzahl der Personen zuhause
  people_home_count: "{{ person_states | select('equalto', 'home') | list | count }}"
  is_people_home: "{{ people_home_count > 0 }}"
  is_someone_just_arrived: "{{ person_states | select('equalto', 'just_arrived') | list | count > 0 }}"

  # Ziel-Temperatur (statisch oder Entität)
  comfort_temp: >
    {% set temp_value = state_attr(input_temperature_comfort, 'state') | default(states(input_temperature_comfort), true) | default(namespace(s = 0)) %}
    {% if temp_value.s == 0 %}
      {{ !input input_temperature_comfort_static | float }}
    {% else %}
      {{ temp_value | float }}
    {% endif %}

  # Eco-Temperatur (statisch oder Entität)
  eco_temp: >
    {% set temp_value = state_attr(input_temperature_eco, 'state') | default(states(input_temperature_eco), true) | default(namespace(s = 0)) %}
    {% if temp_value.s == 0 %}
      {{ !input input_temperature_eco_static | float }}
    {% else %}
      {{ temp_value | float }}
    {% endif %}

  # Prüfen, ob die Automation basierend auf Master-Schalter, Außentemperatur und Raumtemperatur aktiv ist
  is_outside_temp_below_threshold: >
    {% if input_mode_outside_temperature == none %}
      {% set result = true %}
    {% else %}
      {% set outside_temp = state_attr(input_mode_outside_temperature, 'temperature') | default(states(input_mode_outside_temperature), true) | float(-99) %}
      {% set outside_threshold = input_mode_outside_temperature_threshold | float %}
      {% if input_hvac_mode == 'cool' %}
        {% set result = outside_temp >= outside_threshold %}
      {% else %}
        {% set result = outside_temp < outside_threshold %}
      {% endif %}
    {% endif %}
    {{ result }}

  is_room_temp_below_threshold: >
    {% if input_mode_room_temperature == false or input_temperature_sensor == none %}
      {% set result = true %}
    {% else %}
      {% set room_temp = states(input_temperature_sensor) | float(-99) %}
      {% set room_threshold = input_mode_room_temperature_threshold | float %}
      {% if input_hvac_mode == 'cool' %}
        {% set result = room_temp >= room_threshold %}
      {% else %}
        {% set result = room_temp < room_threshold %}
      {% endif %}
    {% endif %}
    {{ result }}

  is_automation_on: "{{ is_master_switch_active and is_outside_temp_below_threshold and is_room_temp_below_threshold }}"
  is_automation_off: "{{ not is_automation_on }}"

  # Heizplan-Aktivität (vereinfacht)
  is_scheduler_active: >
    {% set result = false %}
    {% if input_schedulers == [] %}
      {% set result = true %}
    {% else %}
      {% for scheduler in input_schedulers %}
        {% if states(scheduler) == 'on' %}
          {% set result = true %}
          {% break %}
        {% endif %}
      {% endfor %}
    {% endif %}
    {{ result }}

  # Modus (comfort/eco)
  mode: >
    {% set result = 'eco' %}
    
    {% if is_scheduler_active %}
      {% set result = 'comfort' %}
    {% endif %}

    # Abwesenheit-Logik
    {% if is_person_defined and not is_people_home and result == 'comfort' %}
      {% set result = 'eco' %}
    {% endif %}
    
    {{ result }}

  # Zieltemperatur
  temp_target: >
    {% set result = eco_temp | float %}

    # Ziel-Modus
    {% if mode == 'comfort' %}
      {% set result = comfort_temp | float %}
    # Eco-Modus
    {% elif mode == 'eco' %}
      {% set result = eco_temp | float %}
    {% endif %}

    # Rundung und Minimaltemperatur
    {% set result = (result * 2) | round / 2 %}
    {% if result < 4.0 %}
      {% set result = 4.0 %}
    {% endif %}
    {{ result }}

  # HVAC-Modus
  hvac_mode: >
    {% set mode_map = {'eco': input_hvac_mode, 'comfort': input_hvac_mode} %}
    {% set result = mode_map[mode] %}
    {{ result }}

  # Frostschutz (vereinfacht)
  is_frost_protection_active: >
    {% set result = false %}
    {% if temp_target < input_frost_protection_temp %}
      {% set result = true %}
    {% endif %}
    {{ result }}

  temp_target_with_frost: "{{ iif(is_frost_protection_active and input_hvac_mode == 'heat', input_frost_protection_temp | float, temp_target | float) }}"

  # Alle Entitäten, deren Zustand eine Auslösung bewirken kann.
  listen_entities: >
    {{ input_trvs + input_persons + input_schedulers + [input_mode_winter] + [input_mode_outside_temperature] + [input_temperature_comfort] + [input_temperature_eco] | reject('equalto', none) | list }}

  # Alle Temperatursensoren, deren Zustand eine Auslösung bewirken kann.
  listen_temp_entities: >
    {{ [input_temperature_sensor] + input_trvs | reject('equalto', none) | list }}


# Trigger

trigger:
  # 1. Start-Trigger
  - platform: homeassistant
    event: start
    id: startup

  # 2. Auslöser für Änderungen des Thermostat-Zustands
  - platform: state
    entity_id: "{{ input_trvs }}"
    attribute: temperature
    not_to:
      - "{{ temp_target_with_frost }}"
    id: trv_temp_change

  # 3. Auslöser für Änderungen des HVAC-Modus des Thermostats
  - platform: state
    entity_id: "{{ input_trvs }}"
    attribute: hvac_mode
    not_to:
      - "{{ hvac_mode }}"
    id: trv_hvac_mode_change

  # 4. Auslöser für Änderungen anderer relevanter Entitäten
  - platform: state
    entity_id: "{{ listen_entities }}"
    id: other_entity_change

  # 5. Auslöser für Änderungen des Temperatursensors
  - platform: state
    entity_id: "{{ listen_temp_entities }}"
    id: temp_entity_change

  # 6. Zeitgesteuerter Auslöser für Zeitplan-Anpassungen (jede Minute)
  - platform: time_pattern
    minutes: /1
    id: time_change

  # 7. Personen-Anwesenheits-Trigger
  - platform: state
    entity_id: !input input_persons
    to: "home"
    for: !input input_people_entering_home_duration
    id: person_entering_home

  # 8. Personen-Abwesenheits-Trigger
  - platform: state
    entity_id: !input input_persons
    to: "not_home"
    for: !input input_people_leaving_home_duration
    id: person_leaving_home


# Aktion
action:
  # Automations-Ausschaltlogik
  - if:
      - condition: template
        value_template: "{{ is_automation_off and trigger.id not in ['startup'] }}"
    then:
      - service: logbook.log
        data:
          name: "Klima-Steuerung"
          message: "Automation wurde deaktiviert. Setze BT-HVAC-Modus auf 'off'."
          entity_id: "{{ this.entity_id }}"
      - repeat:
          for_each: "{{ input_trvs }}"
          sequence:
            # Setze den HVAC-Modus auf 'off'
            - if:
                - condition: template
                  value_template: "{{ states(repeat.item) != 'off' }}"
              then:
                - service: climate.set_hvac_mode
                  data:
                    entity_id: "{{ repeat.item }}"
                    hvac_mode: off
      - stop: "Automation deaktiviert."

  # Hauptlogik: BT-Entität steuern
  - variables:
      changes_to_apply: >
        {% set changes = namespace(trvs = []) %}
        {% for thermostat in input_trvs %}
          {% set current_temp = state_attr(thermostat, 'temperature') %}
          {% set current_hvac_mode = states(thermostat) %}
          
          {% if current_hvac_mode != hvac_mode %}
            {% set changes.trvs = changes.trvs + [thermostat] %}
          {% elif current_temp | float != temp_target_with_frost | float and hvac_mode != 'off' %}
            {% set changes.trvs = changes.trvs + [thermostat] %}
          {% endif %}
        {% endfor %}
        {{ changes.trvs | unique | list }}

  - if:
      - condition: template
        value_template: "{{ changes_to_apply | count | int > 0 }}"
    then:
      # Protokollierung der Änderungen
      - service: logbook.log
        data:
          name: "Klima-Steuerung"
          message: "Modus: {{ mode }}, Zieltemperatur: {{ temp_target_with_frost }}, HVAC: {{ hvac_mode }}, Änderungen an {{ changes_to_apply | count }} BT-Entitäten."
          entity_id: "{{ this.entity_id }}"

      # Variablen für die Schleife festlegen
      - variables:
          mode: "{{ hvac_mode }}"
          temp_target: "{{ temp_target_with_frost }}"

      - repeat:
          for_each: "{{ changes_to_apply }}"
          sequence:
            - variables:
                thermostat: "{{ repeat.item }}"
            
            # Setze HVAC-Modus
            - if:
                - condition: template
                  value_template: "{{ states(thermostat) | lower != mode | lower  }}"
              then:
                - action: climate.set_hvac_mode
                  data:
                    entity_id: "{{ thermostat }}"
                    hvac_mode: "{{ mode }}"

            # Setze Temperatur
            - if:
                - condition: template
                  value_template: "{{ state_attr(thermostat, 'temperature') != temp_target and mode != 'off' }}"
              then:
                - action: climate.set_temperature
                  data:
                    entity_id: "{{ thermostat }}"
                    temperature: "{{ temp_target | float }}"

mode: queued
